#!/usr/bin/env python

'''
gping -- show network status
'''
# nmcli dev list
# nmcli dev disconnect iface wlan0
# nmcli nm enable false 

import argparse, os, re, subprocess, sys, time
from functools import partial

import gevent
from gevent.queue import Queue


def ping(ip):
    return os.system('ping -c1 {} 2>/dev/null > /dev/null'.format(ip))


def external_ping():
    return ping('4.2.2.2')


def dns_status(server=None):
    if server:
        server = '@'+server
    return os.system('dig {} yahoo.com > /dev/null'.format(server))


def nm_bounce():
    return os.system('nmcli nm enable false ; nmcli nm enable true')


def nm_router_ip():
    ips = re.findall(
        'dhcp_server_identifier = ([0-9.]+)',
        os.popen('nmcli dev list 2> /dev/null').read(),
        )
    return ips[0] if ips else None


class Pattern(object):
    PAT = '.*'

    def __init__(self):
        self.pat = re.compile(self.PAT)

    def process(self, m):
        return m.group(0)

    def handle(self, line, dest):
        m = self.pat.match(line)
        if not m:
            print '\t?',line,
            return
        res = self.process(m)
        if res:
            dest.put( res )


class NetworkManagerPat(Pattern):
    PAT = '.*NetworkManager\S+ (.+)'

    STATES = {
        'associating': 'a', # authenticating -> associating
        'handshake': '4', # associating -> 4-way handshake
        'completed': 'OK', # 4-way handshake -> completed
        }

    def process(self, m):
        line = m.group(0)
        if re.search('(/php|IP6|IPv6)', line):
            return None
        word = None
        try:
            word = m.group(1).split()[-1]
        except KeyError:
            pass
        label = self.STATES.get(word)
        if not label:
            print '?? {}'.format(line)
        else:
            return label


def follow(fname, dest):
    f = file(fname)
    f.seek(0,2)                 # go to the end
    while True:
        line = f.readline()
        if not line:
            gevent.sleep(.1)
        else:
            dest.put(line)


def grep(pattern, source, dest):
    regex = re.compile(pattern)

    def do_stuff():
        while True:
            line = source.get()
            if regex.match(line):
                dest.put(line)

    return do_stuff

def grep2(pat, source, dest):
    def do_stuff():
        while True:
            pat.handle( source.get(), dest )
    return do_stuff

def printer(source):
    while True:
        line = source.get()
        print line.strip()

def cmd_tail():
    source_queue = Queue()
    filtered_queue = Queue()

    _p = gevent.spawn(printer, filtered_queue)
    nmpat = NetworkManagerPat()
    _g = gevent.spawn(grep2(nmpat, source_queue, filtered_queue))
    follow("/var/log/syslog", source_queue)


def OLD_tail():
    network_pat = re.compile(
        '(cfg80211|iwlwifi|NetworkManager|wlan0:|wpa_supplicant)'
        )
    state_pat = re.compile('interface state: (.+) -> (.+)')

    for line in subprocess.Popen(
        'tail -1000 /var/log/syslog'.split(),
        bufsize=1,                  # line buffered
        stdout=subprocess.PIPE,
        ).stdout:
        if not network_pat.search(line):
            if 0:
                print '\t?',line,
            continue
        m = state_pat.search(line)
        if not m:
            print '\t',line,
            continue
        print m.groups()


def yorn(status):
    return 'ok' if status==0 else 'FAIL'


def show_status():
    router_ip = nm_router_ip()
    print 'router IP:\t', router_ip
    print 'router:\t\t', yorn(ping(router_ip))
    print 'internet:\t', yorn(external_ping())
    print 'DNS:\t\t', yorn(dns_status())


def output(mystr):
    print >>sys.stderr, mystr,

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--bounce', action='store_true')
    parser.add_argument('--tail', action='store_true')
    parser.add_argument('--wait', action='store_true')
    opts = parser.parse_args()

    if opts.tail:
        cmd_tail()
        return
    elif opts.bounce:
        nm_bounce()
        opts.wait = True

    print 'zoot', nm_router_ip()

    if opts.wait:
        print 'Waiting:',
        tests = [ partial(ping, nm_router_ip()), external_ping ]
        for testfunc in tests:
            output('{}:'.format(testfunc))
            while True:
                if not testfunc():
                    output('OK ')
                    break
                output('.')
                time.sleep(1)
        print
            
    show_status()


if __name__=='__main__':
    main()

