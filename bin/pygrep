#!/usr/bin/env python

'''
pygrep -- search Python (and other) files
'''

import fnmatch, logging, optparse, os, sys

PROJECT_DIR = os.path.expanduser('~/work/yed/')
SKIP_DIRS = set(['migrations', 'src'])
# ASSETS_DIR = os.path.expanduser('~/work/web-assets')

logging.basicConfig(stream=sys.stderr, level=logging.DEBUG)
LOG = logging.getLogger(__name__)


def calc_paths(topdir, patterns):
    for root, dirs, files in os.walk(topdir):
        dirs[:] = list( set(dirs) - SKIP_DIRS )
        for paths in [fnmatch.filter(files, pat) for pat in patterns]:
            for path in paths:
                yield os.path.join(root, path)


def pygrep(opts, args):
    pat = args[0]
    for topdir in [PROJECT_DIR]:
        for path in calc_paths(topdir, opts.patterns):
            try:
                for num,line in enumerate(open(path)):
                    if not pat in line:
                        continue
                    if opts.strip_comments and '#' in line: # TODO lang agnostic
                        continue
                    print '{}:{}: {}'.format(path, num+1, line),
            except IOError, exc:
                print '?? {}'.format(exc)


def main():
    parser = optparse.OptionParser()
    parser.add_option("-s", dest="strip_comments", action="store_true")
    parser.add_option("--py", dest="type_python", action="store_true")
    parser.add_option("-w", "--web", dest="type_web", action="store_true")
    
    (options, args) = parser.parse_args()
    options.patterns = ['*.py', 'requirements.txt']
    if options.type_web:
        options.patterns = ['*.js', '*.html']
    pygrep(options, args)


if __name__=='__main__':
    main()
